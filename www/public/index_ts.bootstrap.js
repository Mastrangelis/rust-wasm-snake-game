"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwww"] = self["webpackChunkwww"] || []).push([["index_ts"],{

/***/ "../pkg/snake_game.js":
/*!****************************!*\
  !*** ../pkg/snake_game.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Direction: () => (/* binding */ Direction),\n/* harmony export */   GameStatus: () => (/* binding */ GameStatus),\n/* harmony export */   World: () => (/* binding */ World),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   initSync: () => (/* binding */ initSync)\n/* harmony export */ });\n/* harmony import */ var _snippets_snake_game_027f5cd2d64d2885_www_utils_rand_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snippets/snake_game-027f5cd2d64d2885/www/utils/rand.ts */ \"../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rand.ts\");\n\n\nlet wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n*/\nconst Direction = Object.freeze({ Up:0,\"0\":\"Up\",Right:1,\"1\":\"Right\",Down:2,\"2\":\"Down\",Left:3,\"3\":\"Left\", });\n/**\n*/\nconst GameStatus = Object.freeze({ Won:0,\"0\":\"Won\",Lost:1,\"1\":\"Lost\",Played:2,\"2\":\"Played\", });\n/**\n*/\nclass World {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(World.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number | undefined} width\n    * @param {number | undefined} spawn_index\n    * @returns {World}\n    */\n    static new(width, spawn_index) {\n        const ret = wasm.world_new(!isLikeNone(width), isLikeNone(width) ? 0 : width, !isLikeNone(spawn_index), isLikeNone(spawn_index) ? 0 : spawn_index);\n        return World.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.world_width(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    reward_cell() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_reward_cell(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    snake_head() {\n        const ret = wasm.world_snake_head(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_length() {\n        const ret = wasm.world_snake_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_tail() {\n        const ret = wasm.world_snake_tail(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    start_game() {\n        wasm.world_start_game(this.__wbg_ptr);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    game_status() {\n        const ret = wasm.world_game_status(this.__wbg_ptr);\n        return ret === 3 ? undefined : ret;\n    }\n    /**\n    * @returns {string}\n    */\n    game_status_text() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_game_status_text(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    points() {\n        const ret = wasm.world_points(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {string} direction\n    */\n    set_snake_direction(direction) {\n        const ptr0 = passStringToWasm0(direction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.world_set_snake_direction(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {number}\n    */\n    snake_cells() {\n        const ret = wasm.world_snake_cells(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    */\n    step() {\n        wasm.world_step(this.__wbg_ptr);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_randomRangeIdx_28527d77ce3540de = function(arg0, arg1) {\n        const ret = (0,_snippets_snake_game_027f5cd2d64d2885_www_utils_rand_ts__WEBPACK_IMPORTED_MODULE_0__.randomRangeIdx)(arg0 >>> 0, arg1 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! snake_game_bg.wasm */ \"../pkg/snake_game_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__wbg_init);\n\n\n//# sourceURL=webpack://www/../pkg/snake_game.js?");

/***/ }),

/***/ "../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rand.ts":
/*!*********************************************************************!*\
  !*** ../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rand.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomRangeIdx: () => (/* binding */ randomRangeIdx)\n/* harmony export */ });\nvar randomRangeIdx = function (minRange, maxRange) {\n    return Math.floor(Math.random() * (maxRange - minRange + 1)) + minRange;\n};\n\n\n\n//# sourceURL=webpack://www/../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rand.ts?");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var snake_game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! snake_game */ \"../pkg/snake_game.js\");\n/* harmony import */ var _utils_rand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/rand */ \"./utils/rand.ts\");\n\n\nvar CELL_SIZE = 40; // px\nvar WORLD_WIDTH = 16; // cells\nvar ARROW_KEY_OPTIONS = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\nvar drawReward = function (ctx, world) {\n    var rewardCellIdx = world.reward_cell();\n    var col = rewardCellIdx % WORLD_WIDTH;\n    var row = Math.floor(rewardCellIdx / WORLD_WIDTH);\n    ctx.beginPath();\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n    ctx.stroke();\n};\nvar drawWorld = function (ctx) {\n    ctx.beginPath();\n    for (var i = 0; i < WORLD_WIDTH + 1; i++) {\n        ctx.moveTo(i * CELL_SIZE, 0);\n        ctx.lineTo(CELL_SIZE * i, WORLD_WIDTH * CELL_SIZE);\n    }\n    for (var j = 0; j < WORLD_WIDTH + 1; j++) {\n        ctx.moveTo(0, CELL_SIZE * j);\n        ctx.lineTo(WORLD_WIDTH * CELL_SIZE, CELL_SIZE * j);\n    }\n    ctx.stroke();\n};\nvar drawSnake = function (world, wasmMemory, ctx) {\n    var snakeCells = new Uint32Array(wasmMemory.buffer, world.snake_cells(), world.snake_length());\n    var renderSnakeCell = function (cellIdx, index) {\n        var col = cellIdx % WORLD_WIDTH;\n        var row = Math.floor(cellIdx / WORLD_WIDTH);\n        // Snake color\n        ctx.fillStyle = index === snakeCells.length - 1 ? \"green\" : \"black\";\n        ctx.beginPath();\n        ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n    };\n    snakeCells.slice().reverse().forEach(renderSnakeCell);\n    ctx.stroke();\n};\nfunction drawGameStatus(world, gameStatus, points) {\n    gameStatus.textContent = world.game_status_text();\n    points.textContent = world.points().toString();\n}\nfunction paint(world, wasmMemory, ctx, gameStatus, points, gameControlBtn) {\n    drawWorld(ctx);\n    drawSnake(world, wasmMemory, ctx);\n    drawReward(ctx, world);\n    drawGameStatus(world, gameStatus, points);\n}\nfunction play(world, wasmMemory, ctx, canvas, gameStatus, points, gameControlBtn) {\n    var status = world.game_status();\n    if (status == snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Won || status == snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Lost) {\n        gameControlBtn.textContent = \"Re-Play\";\n        return;\n    }\n    setTimeout(function () {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        world.step();\n        paint(world, wasmMemory, ctx, gameStatus, points, gameControlBtn);\n        requestAnimationFrame(function () {\n            return play(world, wasmMemory, ctx, canvas, gameStatus, points, gameControlBtn);\n        });\n    }, 150);\n}\nvar registerEvents = function (world, canvas, wasmMemory, ctx, gameStatus, points, gameControlBtn) {\n    gameControlBtn.addEventListener(\"click\", function (_) {\n        var status = world.game_status();\n        if (status === undefined) {\n            world.start_game();\n            play(world, wasmMemory, ctx, canvas, gameStatus, points, gameControlBtn);\n        }\n        else {\n            location.reload();\n        }\n    });\n    document.addEventListener(\"keydown\", function (event) {\n        if (!ARROW_KEY_OPTIONS.includes(event.key))\n            return;\n        world.set_snake_direction(event.key);\n    });\n};\n(0,snake_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().then(function (wasm) {\n    var world = snake_game__WEBPACK_IMPORTED_MODULE_1__.World.new(WORLD_WIDTH, (0,_utils_rand__WEBPACK_IMPORTED_MODULE_0__.randomRangeIdx)(0, Math.pow(WORLD_WIDTH, 2) - 1));\n    var canvas = (document.getElementById(\"snake-game-canvas\"));\n    var ctx = canvas.getContext(\"2d\");\n    var gameStatus = document.getElementById(\"game-status\");\n    var points = document.getElementById(\"points\");\n    var gameControlBtn = document.getElementById(\"game-control-btn\");\n    canvas.height = CELL_SIZE * WORLD_WIDTH;\n    canvas.width = CELL_SIZE * WORLD_WIDTH;\n    registerEvents(world, canvas, wasm.memory, ctx, gameStatus, points, gameControlBtn);\n    paint(world, wasm.memory, ctx, gameStatus, points, gameControlBtn);\n});\n\n\n//# sourceURL=webpack://www/./index.ts?");

/***/ }),

/***/ "./utils/rand.ts":
/*!***********************!*\
  !*** ./utils/rand.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomRangeIdx: () => (/* binding */ randomRangeIdx)\n/* harmony export */ });\nvar randomRangeIdx = function (minRange, maxRange) {\n    return Math.floor(Math.random() * (maxRange - minRange + 1)) + minRange;\n};\n\n\n\n//# sourceURL=webpack://www/./utils/rand.ts?");

/***/ }),

/***/ "../pkg/snake_game_bg.wasm":
/*!*********************************!*\
  !*** ../pkg/snake_game_bg.wasm ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"05318354d1dbfe71cff5.wasm\";\n\n//# sourceURL=webpack://www/../pkg/snake_game_bg.wasm?");

/***/ })

}]);